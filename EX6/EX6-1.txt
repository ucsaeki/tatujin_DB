EX6-1 ビットマップインデックスとハッシュインデックス

〇ビットマップインデックス
・0と1で構成され、条件を満たす場合に1が選択される仕組みのインデックス。単純な構造ゆえに動作が早い。

・メリット
→B-treeインデックスに対して、カーディナリティが低い場合に有効である。また、インデックス内に格納しているのが対象の座標を表すROWIDではないため、B-treeより使用容量が少なくて済む。また、B-treeインデックスで使用できない(インデックスが無効化されてしまい動作が遅くなる)ANDやORなどの条件を付与した検索、NULLの検索も可能である。

・デメリット
→取りうる選択肢のパターンを網羅するようなインデックスを作成する必要があるため、更新に時間がかかってしまう。



〇ハッシュインデックス
・Hash関数を利用して求められるHash値とそのレコードの物理位置を格納しておくことで、検索したい値のHash値を求めればすぐにレコードの位置を指定することができ、ソートや探索の必要がない分動作が早い。

・メリット
→探索やソートをせずに一発で位置を指定できるため、B-treeインデックスより動作が早い。

・デメリット
→B-treeは探索の過程でソートを行うが、ハッシュはソートが行われないため、処理の手助けにはならない。
  ピンポイントで指定するという性質上、一致検索でしか利用できない。また、一度作成したものを後から変更することが難しい。さらに、Hash関数の作成が難しく、異なる値を入力しても同じ場所を指定してしまい衝突を起こしてしまう場合がある。このことから、更新によってデータが増加していく場合に対応するのが難しく、長期運用には向かない。
