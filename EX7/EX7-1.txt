EX7-1 パーティションの特徴

〇パーティション自体の特徴
・メリット
  テーブルを分割することによりアクセスして走査する範囲が小さくなりI/O削減が可能であり、パフォーマンスが向上する。また、メンテナンスの際に分割したテーブルを個別にメンテナンスすることで、システム全体を停止することなく作業を行うことができる。同様に、一つのパーティションで障害が発生しても、他のパーティションは問題なく使用することができる。

・デメリット
  インデックスを作成する場合、インデックスもパーティションによる分割に対応した構成にする必要がある。また、テーブルの数が増えるため、使用するメモリやCPUは増加する場合がある。クエリによっては逆に性能が下がってしまう場合がある。後から構造を変更することが難しい。


〇レンジパーティション
→期間や順番などを基準に、ある範囲で区切るようにテーブルを分割する。
・メリット
  年月日などを条件に指定してアクセスしたい場合、対象のテーブルのみへのアクセスが行われ、対象外のテーブルへの無駄なアクセス、走査が発生しないため、動作が早い。また、キャッシュとして保持することで、アクセスが集中しやすい日付への動作を軽くすることも可能
・デメリット
  増加し続ける年月日に対応して足りなくなるテーブルを増やしていく必要がある。将来的に使用するテーブルを先に作っておくことも可能だが、使用されるまでの期間はリソースの無駄遣いになってしまう。

〇リストパーティション
→「関東の都道府県」のようにリスト化した固定の値を基準にテーブルを分割する。
・メリット
  都道府県や部署など、数値として連続しているわけではないデータを連続したものとしてとらえてグループ化することができる。

・デメリット
  分割の単位が一定でないため、それぞれのパーティションで格納する情報量に偏りが発生する

〇ハッシュパーティション
→ハッシュ値を用いて複数のテーブルに振り分けるようにしてテーブルを分割する。
・メリット
  データをそれぞれのパーティションにほぼ均等に振り分けることができるため、特定のテーブルへのアクセス集中を回避することが可能。

・デメリット
  均等に振り分けるとは言っても「ほぼ」であり、正確に均等に分散するわけではない