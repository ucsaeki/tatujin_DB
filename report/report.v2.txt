達人に学ぶDB設計 レポート

佐伯友詞



　本書において、著者が何度も繰り返し主張しているのは、DB設計における「トレードオフ」を考えることの重要性についてである。本レポートは、私がこの本を読んで感じたデータベース設計におけるトレードオフについての所感と、今後のデータベース設計を含む業務における展望を述べるものである。
　


　まず、私が本書を読んで感じた最も大きなトレードオフの関係にあるものは、データベースの性能と予算である。

　高いI/O性能、大容量のストレージを持ち耐障害性にも優れたサーバー。プロトタイプから丁寧にすり合わせや性能検証を行ってお客様や取引先と一緒に作り上げた要件定義、設計。そういったリッチなデータベースは当たり前だが値段もリッチになっていってしまう。もちろん、その手間暇と金銭を惜しまないだけの物的、時間的リソースがあるのならば、一切の妥協なく全ての要素が最高クオリティのデータベースを作成するに越したことはないだろう。

　しかし、現実にはそうはいかない。必ず予算にも時間にも制限が存在するからである。仮にどんなに予算と時間が潤沢にあったとしても、性能面でのパフォーマンスの高さとデータの整合性、耐障害性のような次のトレードオフとの対面は避けられない。著者は「データベース設計とは、限られた予算制約の中で、両端の間の平衡点を見つけ出そうとする努力だと言っていいでしょう(P.36,L.13)」と述べている。これこそが、データベース設計においてエンジニアが最も考慮しなければならない部分であり、本書の核となる文章だと私は思う。この、入れ子のように次々と現れるトレードオフの関係にある要素を適切に捌くことこそが、データベース設計に必要なスキルなのである。
　
　このトレードオフを成り立たせて、誰もが納得する平衡点を見つけ出すために必要なものは、データベースに関する深い知識である。「ここまでならいける」「これ以上は削れない」という押し引きの嗅覚とも呼べる理論的、経験的な知識、感覚は、しかし一朝一夕で身に着けられるものではない。

　その中で私が注目したのは、「大は小を兼ねる」という言説がデータベース設計においては成立しうるという点だ。P.39に、スペックがオーバーな場合よりも、不足した場合の方が悲惨な状況に陥るという例が挙げられている。もちろん、オーバースペックにならないように細心の調整をすることが必要という前提の上で、最後の最後に残った候補からどのように選ぼうかと悩んだ場合、安全マージンを取った選択をするというのが、現状の私でも可能な判断の基準だと思う。データベース構築の究極的な目的は、発注したお客様や取引先の企業が、このデータベースを使用して利益を生み出すことである。言い換えると、お客様に不利益、損害を与えることは目的にそぐわない。この点で、まだ嗅覚の発達していない私が「これ以上は削れない」と判断する最後の基準となるものは、お客様、取引先に損害を与えないことだと考える。互いの利益を出すことが理想だが、それが難しい場合に考えるべきことは、損害を出さない、損害の最小化についてである。そのうえで、大は小を兼ねるという言説に立ち戻ると、支出を抑えるためにギリギリを攻めすぎた調整の結果、性能不足による深刻な事件を引き起こすということは、むしろ損害をより大きくしてしまう行為である。こうなった場合の損害は、要件を少し上回るデータベースを使用する場合の上乗せ額分よりも明らかに大きなものとなることが予想される。このような壊滅的な被害を生み出すことは、利益と損益の平衡点を大きく崩すことになる行為であり、エンジニアとしてこの事態だけは絶対に避けなければならず、トレードオフの中で譲ることができない最後の砦として、最悪の損害の可能性を想定しておくべきだと考えた。
　
　
　
　また、本書でトレードオフ以外で何度も触れられている重要な内容として、「最初が肝心」というものがある。データベース構築における「最初」とは、大まかに要件定義、設計の部分である。
　
　要件定義、設計、実装、テストの各工程を、上流から下流に向けて流れる水のように進んでいくウォーターフォールモデルにおいて、不備が発覚したために一つ前の工程に立ち戻る行為にはデメリットが大きい。特に、テーブル構造を後から変更することには大きな手間がかかると言及されている。コードの実装段階における後からの仕様変更も、多少発生するのは仕方がないことだと思うが、何度も何度も変更して大幅に業務を遅延することになる場合は、要件定義、設計段階に不備があったと言わざるを得ない。コードを作成し始める前の要件定義や設計の段階で、ある程度高い完成度を有していることが求められる。
　
　またバッドノウハウ、グレーノウハウが発生する原因として、長期間使用していくうちに、最初の設計における不備が発覚したり、後からの変更、調整に耐えられない構造で設計されていたため、無理やり変更や調整を加えるための苦肉の策としてこれらが使用されるということが挙げられている。これも、設計の段階から将来的なデータの増加、システムの劣化を正しく想定できていなかったり、拡張性(スケーラビリティ)を考慮していないことが原因である。
　
　要件定義以前の作業として、データクレンジングの重要性についても記載があり、データベース設計に取り掛かる前の段階で、先にクレンジングをしておくべきであるとされている(P.254,図8-3)。これは、設計時の指針となるデータ自体におかしい部分があるとその後の工程に狂いが生じ、ダブルマスタなどのバッドノウハウを生み出す原因となってしまうためである(P.257)。基本的には要件定義が最初の工程で最も大切だが、それ以前の作業が存在する場合には、そちらの方がより重要になってくることもあり、最初が肝心という言葉はより前の段階に向かうにしたがってその重要性を増していく。

　逆にある程度下流に向かったとしても、できる限り早いほうが修正が楽であり必要コストが少ないというのは変わらない。発生してしまった手戻りについて、「問題が今のうちに見つかって良かった」と、稼働前に障害につながる芽を潰せたことをポジティブにとらえることも可能である。
　
　このように、最初の小さなズレを放置すると下流に向かうにつれて大きなヒビとなってしまうため、順番が早い工程の作業をサボらず丁寧に行い、ズレを修正しておくことは、後々の進捗や完成度に大きく貢献する重要な行為である。また、手戻りによる追加作業の発生は明らかに時間と予算のロスであり、このロスを削減することで不必要な予算の消費を抑え、もっとかけるべき部分に予算を使用することができ、予算と性能のトレードオフが優位になるとも考えられる。
　
　
　
　ここまで、本書が説くトレードオフと早期の工程の重要性について、
　
・トレードオフの観点では、性能と予算、パフォーマンスと整合性など、様々な縛りの中で相反する要素のバランスを取る感覚を手に入れることが必要である。また、その最低限の基準として、損害を出さない、最小限にすることを意識する。

・早期の工程が重要という観点では、上流の工程の不備が下流の工程、延いては将来的にも悪影響を残し、バッドノウハウの温床となってしまう可能性がある。また、この不備による金銭的、時間的なリソースのロスが発生する。

　ということを確認してきた。上記二点のうち、特にトレードオフに関しては、その案件によって予算や求められる性能、工期などの条件が様々であることが予想され、実際に経験してみるまでその感覚をつかむことは難しいように思われる。現状の自分がまず最初に、このトレードオフの感覚を養うために行えることは、教本の期日を守るためにどのように問題を解き進めるかということである。主に時間的なリソース管理として、一つの問題にどれくらいの時間を費やすかを意識し、完成度を高めるために時間を使いすぎず、しかし添削の際に修正を言い渡されて修正に時間を取られないような解答を作成しようと意識することは可能である。このように、実務でのリソース管理の予行演習ととらえながら研修を行っていくことで、実際に現場に出た際の感覚習熟を早められるのではないかと考える。
　
　本書は、これまでのJava教本やSQLドリルのように問題を解くだけでなく、実際の業務の雰囲気や起こりうる状況を想像させるような、ワクワクする内容となっていた。今一つ掴み切れていなかったSQLやデータベースの役割が、以前より明確になったことは間違いない。どのような分野でも一番最初の基礎の習得は、その後の習熟のために重要な要素である。本書で学んだデータベースの約束事、セオリー、タブーなど、身に着けた基礎を用いて業務を行い、時には立ち返りながら、トレードオフの捌きという奥義を習得したい。
